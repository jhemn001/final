//===- symbolization.dl -------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019-2023 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
PE-specific rules and relations for symbolization
*/

inferred_special_symbol(0x7FFE0000,"KUSER_SHARED_DATA","LOCAL","NONE","Beg"),
moved_label_class(EA,Op_index,"KUSER_SHARED_DATA"),
moved_displacement_candidate(EA,Op_index,Dest,0x7FFE0000,Dest-0x7FFE0000):-
  binary_format("PE"),
  symbolic_operand(EA,Op_index,Dest,"data"),
  Dest > 0x7FFE0000, Dest < 0x7FFE1000.

got_reference(Address,Function):-
    pe_import_entry(Address,_,Function,_).

//PE binaries have plt-like entries
// These are no delimited to their own section
plt_block(EA,Function):-
    binary_format("PE"),
    pc_relative_jump(EA,Got_entry),
    unconditional_jump(EA),
    pe_import_entry(Got_entry,_,Function,_),
    code_in_block(EA,EA).

.decl reg_has_base_image(EA:address,Reg:register)

reg_has_base_image(EA,Reg):-
    base_address(ImageBase),
    pc_relative_operand(EA,_,ImageBase),
    code(EA),
    reg_def_use.def(EA,Reg),
    instruction_get_operation(EA,"LEA").

symbolic_expr_from_relocation(EA_data,Size,"__ImageBase",0,ImageBase),
reg_has_base_image(EA_code,Reg):-
    binary_format("PE"),
    base_address(ImageBase),
    arch.pointer_size(Size),
    code(EA_code),
    arch.load(EA_code,_,_,_,_,_,_,_),
    pc_relative_operand(EA_code,_,EA_data),
    data_word(EA_data,Size,Value), ImageBase = as(Value,address),
    reg_def_use.def(EA_code,Reg).

reg_has_base_image(EA,Reg):-
    reg_has_base_image(EA2,Reg2),
    reg_def_use.def_used(EA2,Reg2,EA,_),
    (
        arch.move_reg_reg(EA,Reg,Reg2);
        arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,_,Mult,0), Mult>1
    ).

.decl possible_rva_operand(EA:address,Index:operand_index,Dest:address)

possible_rva_operand(EA,Op_index,RVA):-
    instruction_get_op(EA,Op_index,Op),
    op_indirect(Op,_,_,_,_,Value,_), Value >= 0,
    RVA = as(Value,address),
    base_address(ImageBase),
    loaded_section(Begin,End,_),
    (ImageBase + RVA) >= Begin,
    (ImageBase + RVA) < End.

.decl base_relative_operand(EA:address,Index:operand_index,Dest:address)

// Indirect access using register with ImageBase
base_relative_operand(EA_used,Op_index,RVA):-
    reg_has_base_image(EA_def,Reg),
    reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),
    possible_rva_operand(EA_used,Op_index,RVA).

// Indirect access later added to ImageBase
base_relative_operand(EA_def1,Op_index,as(Value,address)):-
    reg_has_base_image(EA_def2,Reg2),
    reg_def_use.def_used(EA_def2,Reg2,EA,_),
    arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),
    reg_def_use.def_used(EA_def1,Reg1,EA,_),

    instruction_get_op(EA_def1,Op_index,Op),
    instruction_get_operation(EA_def1,"LEA"),
    op_indirect(Op,_,_,_,_,Value,_), Value > 0.

// Indirect access later added to ImageBase in an indirect operand
base_relative_operand(EA_def1,Op_index,as(Value,address)):-
    reg_has_base_image(EA_def2,Reg2),
    reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),
    (
        data_access(EA,Op_index_access,"NONE",Reg2,Reg1,1,0,_);
        data_access(EA,Op_index_access,"NONE",Reg1,Reg2,1,0,_)
    ),
    !instruction_get_operation(EA,"LEA"),
    reg_def_use.def_used(EA_def1,Reg1,EA,_),

    instruction_get_op(EA_def1,Op_index,Op),
    instruction_get_operation(EA_def1,"LEA"),
    op_indirect(Op,_,_,_,_,Value,_), Value > 0.

// Chained indirect access:
// lea         r15,[0000000180000000h]
//    ... Some logic that uses r15 to calculate an offset.
// lea         rbp,[rdx*4+00000000003FFA7Ch]
//    ...
// movzx       ecx,byte ptr [rbp+r15+3]
base_relative_operand(EA_def2,Op_index_access,RVA):-
    reg_has_base_image(EA_def1,Reg1),
    reg_def_use.def_used(EA_def1,Reg1,EA,_),

    data_access(EA_def2,Op_index_access,"NONE","NONE",_,4,Offset,_), Offset > 0,
    reg_def_use.def_used(EA_def2,Reg2,EA,_),
    possible_rva_operand(EA_def2,Op_index_access,RVA),

    (
        data_access(EA,_,"NONE",Reg1,Reg2,1,_,_);
        data_access(EA,_,"NONE",Reg2,Reg1,1,_,_)
    ).

.decl base_relative_symbolic_operand(EA:address,Index:operand_index,Dest:address)

symbol_minus_symbol(EA+Disp_offset,Size/8,ImageBase,ImageBase+Value,1,0),
base_relative_symbolic_operand(EA,Op_index,Value):-
    base_relative_operand(EA,Op_index,Value),
    !pc_relative_operand(EA,Op_index,_),
    instruction_displacement_offset(EA,Op_index,Disp_offset,_),
    instruction_get_op(EA,Op_index,Op),
    op_indirect(Op,_,_,_,_,_,Size),
    base_address(ImageBase).

inferred_special_symbol(ImageBase,"__ImageBase","LOCAL","NONE","Beg"):-
    binary_format("PE"),
    base_address(ImageBase).

inferred_special_symbol(Start,"__EntryPoint","GLOBAL","FUNC","Beg"):-
    binary_format("PE"),
    entry_point(Start).

symbolic_operand_candidate(EA,Op_index,Dest,"data"):-
    code(EA),
    base_address(ImageBase),
    pc_relative_operand(EA,Op_index,Dest),
    Dest = ImageBase.

.decl base_relative_operation(EA_relop:address,EA:address)

base_relative_operation(EA_relop,EA_inst):-
    base_relative_operand(EA_relop,_,_),
    reg_def_use.def_used(EA_relop,_,EA_inst,_).

base_relative_operation(EA_relop,EA_next):-
    base_relative_operand(EA_relop,_,_),
    reg_def_use.def_used(EA_relop,_,EA_inst,_),
    reg_def_use.def_used(EA_inst,_,EA_next,_).

.decl base_relative_jump(EA_relop:address,EA:address)

// TODO: narrow by restricting base_relative_operation chain to operations a
//       jump table address calculation would actually use.
base_relative_jump(EA_relop,EA):-
    reg_jump(EA,_),
    base_relative_operation(EA_relop,EA).

labeled_data_candidate(ImageBase+Dest):-
    base_address(ImageBase),
    base_relative_symbolic_operand(_,_,Dest).

.decl dos_header_symbolic_operand(EA:address,Dest:unsigned)

symbolic_expr_from_relocation(EA+Disp_offset,Size/8,"__ImageBase",as(Dest-ImageBase,number),Dest),
dos_header_symbolic_operand(EA,Dest):-
    binary_format("PE"),
    base_address(ImageBase),
    pc_relative_operand(EA,_,Dest),
    instruction_displacement_offset(EA,Op_index,Disp_offset,_),
    instruction_get_op(EA,Op_index,Op),
    op_indirect(Op,_,_,_,_,_,Size),
    Dest > ImageBase,
    Dest < ImageBase + 64.

symbolic_expr_from_relocation(EA+Disp_offset,Size/8,"__ImageBase",as(Dest-ImageBase,number),Dest),
dos_header_symbolic_operand(EA+Disp_offset,Dest):-
    binary_format("PE"),
    base_address(ImageBase),
    op_indirect(Op,_,_,_,1,Offset,Size),
    instruction_get_op(EA,Op_index,Op),
    instruction_displacement_offset(EA,Op_index,Disp_offset,_),
    Dest = as(Offset,address),
    Dest >= ImageBase,
    Dest <= ImageBase+64.

symbolic_expr_from_relocation(EA+Disp_offset,Size/8,"__ImageBase",as(Dest-ImageBase,number),Dest),
dos_header_symbolic_operand(EA+Disp_offset,Dest):-
    binary_format("PE"),
    base_address(ImageBase),
    op_immediate(Op,Offset),
    instruction_get_op(EA,Op_index,Op),
    instruction_immediate_offset(EA,Op_index,Disp_offset,_),
    Size = 8,
    Dest = as(Offset,address),
    Dest >= ImageBase,
    Dest <= ImageBase+64.

jump_table_start(EA_jump,4,TableStart,TableReference,1):-
    base_address(ImageBase),
    base_relative_jump(EA_base,EA_jump),
    base_relative_operand(EA_base,_,Value),
    TableStart=ImageBase+Value,
    TableReference=ImageBase.

// the call to main is right after the call to "__p___argc"
main_function(EA):-
    code(EA1),
    direct_call(EA1,PLT_ARGC),
    plt_block(PLT_ARGC,"__p___argc"),
    next(EA1,Block),
    code_in_refined_block(EA_call_main,Block),
    direct_call(EA_call_main,EA).

inferred_special_symbol(EA,"main","PUBLIC","NONE","Beg"):-
    binary_format("PE"),
    main_function(EA).

// Off-cut base-relative reference to symbol:
//    e.g.  movzx EDX,BYTE PTR [RAX+RCX*1+((IMAGEREL N_180fa2570)+7)]
//                                                               ^^
moved_label_class(EA,Op_index,"base-relative collides with pointer"),
moved_data_label(EA+Disp_offset,Size,ImageBase+Dest,NewDest):-
    base_address(ImageBase),
    base_relative_symbolic_operand(EA,Op_index,Dest),
    instruction_displacement_offset(EA,Op_index,Disp_offset,_),
    symbol_minus_symbol(EA+Disp_offset,Size,_,_,_,_),
    // Reference collides with a pointer.
    arch.pointer_size(Pt_size),
    address_in_data_refined_range.overlap(ImageBase+Dest,Pt_size,NewDest),
    symbolic_data(NewDest,_,_).

// Moved label due to padded jump table.
symbolic_operand_candidate(EA,OpIndex,as(Offset,address),"jump-table"),
moved_label_class(EA,OpIndex,"relax basic jump-table-start"),
moved_label(EA,OpIndex,as(Offset,address),TableStart):-
    padded_rel_addr_start(EA,OpIndex,TableStart,Offset,Dest1,Dest2),
    code(Dest1),
    code(Dest2).
