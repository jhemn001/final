//===- jump_tables.dl ---------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019-2022 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module defines common relations for jump tables.
*/

/**
A candidate entry in a jump table (may contain absolute or relative addresses)

Calculated prior to code inference.

Attributes:

* EA: The address of the instruction from which the jump occurs.
* DataEA: The address at which the actual data entry of the jump table resides.
* DataSize: The size of the jump table entry
* TargetEA: The target of the jump.
*/
.decl jump_table_candidate(EA:address,DataEA:address,DataSize:unsigned,TargetEA:address)

// Fallback rule for architectures where this is unused.
jump_table_candidate(0,0,0,0):-
    false.

/**
A jump table data entry is overlapped by code
*/
.decl invalid_jump_table_candidate(DataEA:address,DataSize:unsigned)

invalid_jump_table_candidate(DataEA,DataSize):-
    max_instruction_size(MaxInstSize),
    // query instructions that may overlap
    jump_table_candidate(_,DataEA,DataSize,_),
    arch.instruction_at(EA,Inst),
    DataEA - MaxInstSize < EA, EA < DataEA + DataSize,
    // confirm code
    code(Inst),
    // confirm overlap
    instruction(Inst,InstSize,_,_,_,_,_,_,_,_),
    DataEA < EA + InstSize.

/**
Subset of jump_table_candidate that appears to be valid after code inference.

Attributes:

* EA: The address of the instruction from which the jump occurs.
* DataEA: The address at which the actual data entry of the jump table resides.
* TargetEA: The target of the jump.
*/
.decl jump_table_candidate_refined(EA:address,DataEA:address,TargetEA:address)

jump_table_candidate_refined(EA,EntryAddr,TargetAddr):-
    jump_table_candidate(EA,_,_,_),
    code(EA),
    EntryAddr = min EntryAddr : {
        jump_table_candidate(EA,EntryAddr,_,_)
    },
    jump_table_candidate(EA,EntryAddr,EntrySize,TargetAddr),
    code(TargetAddr),
    !invalid_jump_table_candidate(EntryAddr,EntrySize).

jump_table_candidate_refined(EA,NextEntryAddr,TargetAddr):-
    jump_table_candidate_refined(EA,EntryAddr,_),
    jump_table_candidate(EA,EntryAddr,EntrySize,_),
    NextEntryAddr = EntryAddr + EntrySize,
    jump_table_candidate(EA,NextEntryAddr,EntrySize,TargetAddr),
    code(TargetAddr),
    !invalid_jump_table_candidate(NextEntryAddr,EntrySize).

/**
CFG edges formed by jump tables using the best available information during
value analysis.

Attributes:

* EA: address where the jump occurs
* Dest: a potential destintation address
*/
.decl jump_table_target(EA:address,Dest:address)

jump_table_target(EA,Dest):-
    jump_table_candidate_refined(EA,_,Dest).

jump_table_target(EA,Dest):-
    jump_table_start(EA,Size,TableStart,_,_),
    relative_jump_table_entry_candidate(_,TableStart,Size,_,Dest,_,_).
